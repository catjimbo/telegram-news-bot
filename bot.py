import asyncio
import nest_asyncio
import logging
import os
import feedparser
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from transformers import pipeline
from openai import OpenAI
import newspaper
from database import init_db, get_user_tags, set_user_tags

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# Zero-shot –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
classifier = pipeline(
    "zero-shot-classification",
    model="MoritzLaurer/mDeBERTa-v3-base-mnli-xnli",
    tokenizer="MoritzLaurer/mDeBERTa-v3-base-mnli-xnli"
)

# OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY)

# –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π
RSS_SOURCES = [
    "https://ria.ru/export/rss2/world/index.xml",
    "https://lenta.ru/rss/news",
    "https://www.vedomosti.ru/rss/news",
    "https://tass.ru/rss/v2.xml"
]


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç ü§ñ\n\n"
        "1. –ù–∞–ø–∏—à–∏ /subscribe <—Ç–µ–≥–∏> ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: /subscribe –∫–æ—Å–º–æ—Å, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
        "2. –ü–æ—Ç–æ–º ‚Äî /news, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–≤–æ–∏–º —Ç–µ–º–∞–º üóûÔ∏è"
    )

# –ö–æ–º–∞–Ω–¥–∞ /subscribe
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if context.args:
        tags = ' '.join(context.args).split(',')
        tags = [tag.strip().lower() for tag in tags]
        await set_user_tags(user_id, tags)
        await update.message.reply_text(f"–¢–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(tags)}")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–µ–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä: /subscribe –ò–ò, –∫–æ—Å–º–æ—Å")

# –ö–æ–º–∞–Ω–¥–∞ /news
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tags = await get_user_tags(user_id)

    if not tags:
        await update.message.reply_text("–¢—ã –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–ª —Ç–µ–º—ã. –ù–∞–ø–∏—à–∏ /subscribe <—Ç–µ–≥–∏>")
        return

    matched = []
    max_checked = 1000  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
    checked = 0

    for url in RSS_SOURCES:
        feed = feedparser.parse(url)
        for entry in feed.entries:
            if checked >= max_checked or len(matched) >= 5:
                break
            if is_relevant_zero_shot(entry, tags):
                matched.append(entry)
            checked += 1

    if not matched:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–≤–æ–∏–º —Ç–µ–º–∞–º üòï")
        return

    for entry in matched:
        summary = await summarize(entry)
        text = f"{entry.title}. {entry.description}"
        trust_label = get_trust_level_label(text)

        message = (
            f"üì∞ {entry.title}\n\n"
            f"üìù {summary}\n\n"
            f"{trust_label}\n"
            f"üîó {entry.link}"
        )
        await update.message.reply_text(message)


# Zero-shot —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
def is_relevant_zero_shot(entry, tags, threshold=0.85):
    title = getattr(entry, "title", "")
    description = getattr(entry, "description", "")
    summary = getattr(entry, "summary", "")
    content = ""

    if hasattr(entry, "content") and entry.content:
        content = entry.content[0].value

    text = f"{title}. {description} {summary} {content}".strip().replace('\n', ' ')

    if not text or not tags:
        return False

    try:
        result = classifier(text, candidate_labels=tags)
        top_score = result["scores"][0]
        top_label = result["labels"][0]

        print(f"[Zero-Shot] '{title}' ‚Üí {top_label} ({top_score:.2f})")
        return top_score >= threshold
    except Exception as e:
        print(f"[Zero-Shot] –û—à–∏–±–∫–∞: {e}")
        return False

def get_trust_level_label(text, threshold_low=0.6, threshold_high=0.85):

    labels = ["–Ω–∞–¥–µ–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]

    try:
        result = classifier(text, candidate_labels=labels)
        label = result["labels"][0]
        score = result["scores"][0]

        print(f"[TrustCheck] ‚Üí {label} ({score:.2f})")

        if label == "—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
            if score >= threshold_high:
                return "üî¥ –ù–∏–∑–∫–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å"
            elif score >= threshold_low:
                return "üü° –°–æ–º–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å"
            else:
                return "üü¢ –í—ã—Å–æ–∫–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å"
        else:
            return "üü¢ –í—ã—Å–æ–∫–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å"

    except Exception as e:
        print(f"[TrustCheck] –û—à–∏–±–∫–∞: {e}")
        return "‚ö™ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏
def extract_article_text(url):
    try:
        article = newspaper.Article(url, language="ru")
        article.download()
        article.parse()
        return article.text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—å–∏: {e}")
        return ""

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏
async def summarize(entry) -> str:
    article_text = extract_article_text(entry.link)
    title = getattr(entry, "title", "")
    fallback = f"{title}. {getattr(entry, 'description', '')}"
    text = article_text if article_text else fallback

    prompt = (
        "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –¥–µ–ª–∞—é—â–∏–π —Å–∞–º–º–∞—Ä–∏ –Ω–æ–≤–æ—Å—Ç–µ–π."
        " –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏:\n\n"
        f"{text}"
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.5,
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"[GPT Summary] –û—à–∏–±–∫–∞: {e}")
        return "(–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏)"

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(CommandHandler("news", news))
    await app.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())
